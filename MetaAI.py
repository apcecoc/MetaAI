__version__ = (1, 0, 0)

#       ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

#              ¬© Copyright 2025
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

from telethon.tl.types import Message
from .. import loader, utils
import aiohttp
import asyncio

@loader.tds
class MetaAIModule(loader.Module):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—â–µ–Ω–∏—è —Å –ò–ò"""
    strings = {
        "name": "MetaAI",
        "api_error": "üö® An error occurred while accessing the service: {}",
        "response_error": "üö® Invalid response received: {}",
        "ai_response": "ü§ñ AI Response:\n{}",
        "id_cleared": "‚úÖ Conversation ID cleared. A new conversation has started.",
        "missing_param": "‚ùå Missing required parameter: {}",
        "generating_response": "Generating response",
    }

    strings_ru = {
        "name": "MetaAI",
        "api_error": "üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É: {}",
        "response_error": "üö® –ü–æ–ª—É—á–µ–Ω –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {}",
        "ai_response": "ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n{}",
        "id_cleared": "‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω. –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.",
        "missing_param": "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {}",
        "generating_response": "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "conversation_id", None, "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ—Å–µ–¥—ã"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def _animate_loading(self, message: Message):
        """–ê–Ω–∏–º–∞—Ü–∏—è –∏–∑ —Ç–æ—á–µ–∫ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        dots = ""
        while not self.animation_done:
            dots = dots + "." if len(dots) < 4 else ""
            await message.edit(f"{self.strings['generating_response']}{dots}")
            await asyncio.sleep(0.5)

    @loader.command(
        ru_doc="<—Ç–µ–∫—Å—Ç> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç",
        en_doc="<text> - Send a message to AI and get a response"
    )
    async def metaaicmd(self, message: Message):
        args = utils.get_args_raw(message)

        if not args:
            await utils.answer(message, self.strings["missing_param"].format("text"))
            return

        url = "https://api.paxsenix.biz.id/ai/metaai"
        params = {"text": args}

        if self.config["conversation_id"]:
            params["conversation_id"] = self.config["conversation_id"]

        self.animation_done = False
        animation_task = asyncio.create_task(self._animate_loading(message))

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()

                        if not data.get("ok"):
                            await utils.answer(message, self.strings["response_error"].format(data.get("message", "Unknown error")))
                            return

                        self.config["conversation_id"] = data.get("external_conversation_id")

                        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        ai_message = data.get("message", "No response available.")
                        if "I am still improving my command of other languages" in ai_message:
                            ai_message = ai_message.split("\n\nI am still improving my command of other languages")[0]

                        self.animation_done = True
                        await utils.answer(message, self.strings["ai_response"].format(ai_message))
                    else:
                        await utils.answer(message, self.strings["api_error"].format(f"HTTP {response.status}"))
        except Exception as e:
            await utils.answer(message, self.strings["api_error"].format(str(e)))
        finally:
            self.animation_done = True
            animation_task.cancel()

    @loader.command(
        ru_doc="–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è",
        en_doc="Clear the saved conversation ID for a new interaction"
    )
    async def clearidcmd(self, message: Message):
        self.config["conversation_id"] = None
        await utils.answer(message, self.strings["id_cleared"])
